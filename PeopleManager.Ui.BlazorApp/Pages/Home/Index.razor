@attribute [Route(AppRoutes.Home.Index)]

@using PeopleManager.Dto.Results
@using PeopleManager.Sdk
@using Vives.Services.Model
@using PeopleManager.Ui.BlazorApp.Components

@inject IJSRuntime  JsRuntime


@inject PersonSdk PersonSdk

<PageTitle>Home</PageTitle>

<h1 class="warning">Our employees</h1>

@if (People is not null)
{
    <div class="row">
        @foreach (var person in People)
        {
            <div class="col-3">
                <Card>
                    <Header>
                        @person.FirstName @person.LastName
                    </Header>
                    <Body>
                        <p>See the details <a href="@AppRoutes.Home.DetailsUrl(person.Id)">here</a>!</p>
                    </Body>
                    <Footer>
                        <a href="mailto:@person.Email">@person.Email</a>
                    </Footer>
                </Card>
            </div>
        }
    </div>
}
else
{
    <p>Please hire some employees...</p>
}

<button @onclick="ShowAlert">Show Alert @ReturnText</button>
<button @onclick="OpenDialog">Open dialog!</button>

<ConfirmDialog @ref="MyFancyConfirmDialog" 
ConfirmButtonText="Allow" 
CancelButtonText="Deny" 
ConfirmClicked="Allowed" 
CancelClicked="Denied">
    <Title>
        Dit is een titeltje
    </Title>
    <Body>
        <p>Are you sure you want to allow this action?</p>
    </Body>
</ConfirmDialog>

@code
{
    private string? ReturnText { get; set; }
    private ConfirmDialog? MyFancyConfirmDialog { get; set; }
    private IList<PersonResult>? People { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var paging = new Paging { Limit = 100 };

        var result = await PersonSdk.Find(paging);

        People = result.Data;

        await base.OnInitializedAsync();
    }

    private void Allowed()
    {

    }

    private void Denied()
    {

    }

    private void OpenDialog()
    {
        MyFancyConfirmDialog?.Show();
    }

    private async Task ShowAlert()
    {
        var dotNetRef = DotNetObjectReference.Create(this);
        var returnText = await JsRuntime.InvokeAsync<string>("showAlert", dotNetRef, "This is the message you need to show.");
        ReturnText = returnText;
    }

    [JSInvokable]
    public Task InvokeFromScript(string message)
    {
        ReturnText = message;
        return Task.CompletedTask;
    }
}
